#!/bin/sh

hostname=$(hostname)

verbosity=">&/dev/null"
interface=wlp3s0
wpaconf="/etc/wpa_supplicant.conf"
essid=""
dhcp=dhclient
checkhost=www.google.de

open=false
save=false
quiet=false

function main {
  if ! checkSyntax; then
    failecho "please check your call syntax!"
    exit 1
  fi

  greenecho "pinging $checkhost .."
  if checkConnection; then
    successecho "$hostname is already connected, nothing to do here!"
    exit 0
  fi

  failecho "$hostname is not connected!"

  greenecho "checking rfkill for software block.."
  if checkBlock; then
    failecho "wifi device seems to be blocked, trying to unblock"
    unblock
  fi
  
  if checkWPA; then
    greenecho "trying to restart $dhcp since $interface is already set up.."
    startDHCP
    if checkConnection; then
      finish
      return 0
    fi
    redecho "failed to connect, trying full reconnect.."
  fi

  greenecho "terminating old services.."
  disconnect

  greenecho "starting relevant services.."
  connect

  if checkConnection; then
    finish
    return 0
  fi


  return 1
}

function finish {
  successecho "connection successfully established!"
  if $save; then
    greenecho "saving current configuration.."
    save
  fi
}

function checkSyntax {
  if $open; then
    if [ -z "$essid" ]; then
      return 1
    fi
  fi

  return 0
}

function checkConnection {
  run "ping -c 1 -W 2 $checkhost $verbosity"
  return $?
}

function checkWPA {
  run "wpa_cli status"
  return $?
}

function checkDHCP {
  run "pidof $dhcp"
  return $?
}

# Check if wifi is blocked and return 0 if true
function checkBlock { 
  run "rfkill list wifi | grep yes"
  return $?
}

function unblock {
  run "rfkill unblock wifi"
  return $?
}

function startDaemon {
  run "systemctl start wconnect@"$interface".service"
  return $?
}

function stopDaemon {
  run "systemctl stop wconnect@"$interface".service"
  return $?
}

function startWPA {
  run "wpa_supplicant -B -Dwext -i $interface -c /etc/wpa_supplicant.conf"
  return $?
}

function stopWPA {
  run "wpa_cli terminate"
  return $?
}

function startDHCP {
  run "$dhcp -v $interface"
  return $?
}

function stopDHCP {
  run "$dhcp -x"
  return $?
}

function startIWCONFIG {
  run "iwconfig $interface essid $essid"
  return $?
}

#function stopIWCONFIG {
  # TODO ?
#}

function connect {
  if $open; then
    startIWCONFIG
  else
    startWPA
  fi

  startDHCP
  #startDaemon
}

function disconnect {
  #stopDaemon  
  stopDHCP
  stopWPA
#  stopIWCONFIG
}

function reconnect {
  disconnect
  connect
}

function run () {
  sh -c "sudo $@ $verbosity"
  return $?
}

function help {
  echo -e "usage: wconnect [COMMANDS]\n
    possible commands are:\n 
    \t-e provide an essid to connect to 
    \t-h this help message
    \t-i specify interface
    \t-o open network (requires a essid)
    \t-q quiet mode
    \t-r force reconnect 
    \t-s save used configuration (todo)
    \t-v verbosity: 0 - nothing, 1 - stdout, 2 - stdout & stderr
    \t-x terminate connection\n"
}

prefix="••"

function greenecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;32m $@\033[0m"
}

function redecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;31m $@\033[0m"
}

function successecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;38m $@\033[0m"
}

function failecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;31m $@\033[0m"
}

while getopts "e:hi:oqrsv:x" optname
  do
    case "$optname" in
      "e")
        essid=$OPTARG
        ;;
      "h")
        help
        exit 0
        ;;
      "i")
        interface=$OPTARG
        ;;
      "o")
        open=true
        ;;
      "q")
        quiet=true
        ;;
      "r")
        disconnect
        ;;
      "s")
        save=true
        ;;
      "v")
        case "$OPTARG" in
          0)
            verbosity=">&/dev/null"
            ;;
          1)
            verbosity="2>/dev/null"
            ;;
          2)
            verbosity=""
            ;;
          *)
            failecho "only values 0,1 and 2 are allowed. Defaulting to 0 (no output)"
            ;;
        esac
        ;;
      "x")
        disconnect
        exit 0
        ;;
      "?")
        failecho "Unknown option $OPTARG"
        exit 1
        ;;
      ":")
        failecho "No argument value for option $OPTARG"
        exit 1
        ;;
      *)
        # Should not occur
        failecho "Unknown error while processing options"
        exit $?
        ;;
    esac
  done

if $quiet; then
  if main >&/dev/null; then
    successecho "exiting wconnect"
    exit 0
  fi
else
  if main; then
    successecho "exiting wconnect"
    exit 0
  fi
fi

failecho "could not connect! see 'journalctl -xn' or enhance verbosity for more info"
failecho "exiting wconnect"
exit 1

