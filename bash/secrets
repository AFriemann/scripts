#!/bin/bash

_red() { echo -e "\033[0;31m$*\033[0m"; }
_green() { echo -e "\033[0;32m$*\033[0m"; }
_yellow() { echo -e "\033[0;33m$*\033[0m"; }

_exists() {
    compgen -A function | grep "^$1$" &>/dev/null
}

help() {
    # HELP: print usage information (optional [<command>])
    (( $# > 0 )) && {
        _exists "$1" || {
            _red "uknown command: $1" && exit 1
        }

        type "$@"
        return $?
    }

    _yellow "USAGE:"
    _green "$(basename "$0") COMMAND [ARGS]"
    echo
    _yellow "COMMANDS:"

    local function_re='(^[a-z]+)\(\) \{$'
    local help_re='^[[:space:]]*#[[:space:]]*HELP:[[:space:]]*(.+)$'
    local args_re='<[a-z]+>'

    local function args description

    while read -r
    do
        if [[ $REPLY =~ $function_re ]]; then
            function="${BASH_REMATCH[1]}"
        elif [[ -n "$function" ]] && [[ $REPLY =~ $help_re ]]; then
            description="${BASH_REMATCH[1]}"

            if [[ $description =~ $args_re ]]; then
                args=$(echo "$description" | grep -Eo "\[?<[a-z]+>\]?" | tr -d '<>' | tr '\n' ' ' | awk '{$1=$1};1')
            fi

            _green "$function${args:+\t${args^^}}"
            echo -e "\t$description"
            unset function args description
        fi
    done < "$0"
}

_confirm() {
    read -r -p "$1, are you sure? " answer
    test "$answer" = 'yes'
}

_get_key_id() {
    keyctl request user "$1" @u 2>/dev/null
}

_clipboard() {
    : "${XDG_SESSION_TYPE:-x11}"

    case $XDG_SESSION_TYPE in
        x11)
            xclip -sel clip
            ;;
        wayland)
            wl-copy -n -o
            ;;
        *)
            xclip -sel clip
            ;;
    esac
}

add() {
    # HELP: Add a new secret <key>
    _get_key_id "$1" && { 
        _red "key already exists: $1" && exit 1
    }

    read -r -s -p "secret: " password
    echo "$password" | keyctl padd user "$1" @u
    unset password
}

update() {
    # HELP: Update an existing secret <key>
    key_id="$(_get_key_id "$1")" || {
        _red "unknown key: $1" && exit 1
    }

    _confirm "updating $1" || exit 1

    read -r -s -p "secret: " password
    echo "$password" | keyctl pupdate "$key_id"
    unset password
}

remove() {
    # HELP: Remove a secret <key>
    key_id="$(_get_key_id "$1")" || {
        _red "unknown key: $1" && exit 1
    }

    _confirm "removing $1" || exit 1

    keyctl revoke "$key_id"
    keyctl unlink "$key_id" @u
}

clip() {
    # HELP: Copy a secret <key> to the clipboard
    key_id="$(_get_key_id "$1")" || {
        _red "unknown key: $1" && exit 1
    }

    keyctl pipe "$key_id" | _clipboard
}

print() {
    # HELP: Print a secret <key> to stdout
    key_id="$(_get_key_id "$1")" || {
        _red "unknown key: $1" && exit 1
    }

    keyctl pipe "$key_id"
}

list() {
    # HELP: List all keys in the keyring
    keyctl list @u | sed 1d | awk -F':' '{ print $3 }' | awk '{$1=$1};1'
}

if [ "${BASH_SOURCE[0]}" == "$0" ]
then
    _exists "$1" || {
        _red "uknown command: $1" && exit 1
    }

    # shellcheck disable=SC2068
    ${@:-help}
fi
