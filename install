#!/bin/sh
# script to update git repository and binaries
#
systemdFolder="/usr/lib/systemd"
bindir="/usr/bin"
wirelessDevice=""

verbosity="&>/dev/null"

fresh=false
offline=false

# Two dots :)
prefix="••"

# echo colours and format
function greenecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;32m $@\033[0m"
}

function redecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;31m $@\033[0m"
}

function successecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;38m $@\033[0m"
}

function failecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;31m $@\033[0m"
}

function root {
  if [ "$UID" != 0 ]; then 
    me=$(dirname $0)/$(basename $0)
    sudo $me
    exit 0
  fi

  return 0
}

function run () {
  sh -c "$@ $verbosity"
  return $?
}

function remove {
  remove_systemd
  remove_binaries
}

function remove_binaries {
  for file in bin/*; do
    if [ -f bin/$file ]; then
      run "rm $bindir/$file"
    fi
  done
}

function install_binaries {
  for file in bin/*; do
    if [ -f bin/$file ]; then
      run "cp bin/$file $bindir/$file"
      run "chmod 755 $bindir/$file"
    fi
  done
}

function remove_systemd {
  stop_systemd
  disable_systemd
 
  run "rm $systemdFolder/system/wconnect*.service"
  run "rm $systemdFolder/system/dhclient*.service"
  run "rm $systemdFolder/scripts/reconnect.sh"
  run "rm $systemdFolder/scripts/wc-reconnect"
  
  run "rm $systemdFolder/system/i3lock*.service"

  run "systemctl --system daemon-reload"
}

function install_systemd {
  stopSystemd
  disableSystemd

  run "pushd ./"

  cd src
  #run "cp systemd/system/wconnect@.service $systemdFolder/system/"
  #run "cp systemd/system/wpa_supplicant@.service $systemdFolder/system/"
  #run "cp systemd/system/dhclient@.service $systemdFolder/system/"
  #run "cp systemd/scripts/wc-reconnect $systemdFolder/scripts/"
  #
  #run "cp $srcdir/systemd/system/i3lock@.service $systemdFolder/system/"

  run "popd"

  run "systemctl --system daemon-reload"
}

function start_systemd {
  #systemctl start wconnect@"$wirelessDevice".service
  #systemctl start wpa_supplicant@"$wirelessDevice".service
  #systemctl start dhclient@"$wirelessDevice".service
  return 0
}

function stop_systemd {
  #systemctl stop i3lock@"$USER".service &>/dev/null

  #systemctl stop wconnect* &>/dev/null
  #systemctl stop dhclient* &>/dev/null
  #systemctl stop wpa_supplicant* &>/dev/null
  return 0
}

function enable_systemd {
  #systemctl enable i3lock@"$USER".service

  #systemctl enable wpa_supplicant@"$wirelessDevice".service
  #systemctl enable dhclient@"$wirelessDevice".service
  #systemctl enable wconnect@"$wirelessDevice".service
  return 0
}

function disable_systemd {
  #systemctl disable wconnect*
  #systemctl disable wpa_supplicant*  
  #systemctl disable dhclient*

  #systemctl disable i3lock@"$USER".service
  return 0
}

function online {
  if run "ping -c 1 -W 1 www.google.de" &>/dev/null; then
    return 0
  fi
  
  return 1
}

function main {
  root
  
  if online; then
    if run "git pull"; then
      successecho "Git repository successfully updated"
    fi
  fi

  remove
  
  greenecho "attempting to install binaries.."
  if install_binaries
    then
      successecho "Binaries successfully installed to $bindir"
    else
      failecho "Failed copying scripts to $bindir"
      exit 1 
  fi

  # greenecho "attempting to install systemd files.."
  # if installSystemd
  #   then
  #     successecho "Systemd service file successfully installed"
  #   else
  #     failecho "Something went wrong while attempting to install systemd files.."
  #     exit 1
  # fi

  # greenecho "attempting to enable and start systemd services.."
  # #enableSystemd
  # if startSystemd
  #   then
  #     successecho "Installation completed successfully, systemd services started and scripts linked to $bindir"
  #   else
  #     failecho "Something went wrong while attempting to enable and start systemd services.."
  # fi

  return 0
}

function help {
  echo -e "usage: scriptSetup [COMMANDS]\n
    possible commands are:\n 
    \t-h this help message
    \t-r removes all installed scripts and services\n"
}

while getopts "hr" optname
do
  case "$optname" in
    "h")
      help
      exit 0
      ;;
    "r")
      remove
      exit 0
      ;;
    "?")
      failecho "Unknown option $OPTARG"
      exit 1
      ;;
    ":")
      failecho "No argument value for option $OPTARG"
      exit 1
      ;;
    *)
      # Should not occur
      failecho "Unknown error while processing options"
      exit $?
      ;;
  esac
done

main

exit 0
