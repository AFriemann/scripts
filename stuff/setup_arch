#!/bin/sh

userhome=/home/$(whoami)

gitfolder=git

githome=$userhome/$gitfolder

folders={$userhome/{Downloads,Documents,Code,Work}}

dotfolders={$userhome/{.polipo/polipo-cache}}

gitfolders={$githome/{aljosha.friemann/profiles,sc/{configs,scripts}}}

gitlabhttp=http://git.xchange.ms

gitlabssh=git@git.xchange.ms

verbosity="&>/dev/null"

### --------------------------------------------------------- ###

# Two dots :)
prefix="••"

# echo colours and format
function greenecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;32m $@\033[0m" 
}

function redecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;31m $@\033[0m" 
}

function successecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;38m $@\033[0m" 
}

function failecho () { 
  echo -e "\033[1;34m${prefix}\033[0m\033[1;31m $@\033[0m" 
}

function root {
  if [ "$UID" != 0 ]; then 
    me=$(dirname $0)/$(basename $0)
    sudo $me
    exit 0
  fi

  return 0
}

function run () {
  sh -c "$@ $verbosity"
  return $?
}

### --------------------------------------------------------- ###

success=0

function create_user () {
  user=$1
  run "groupadd $user"
  run "useradd -m -g $user -G audio,video,power,wheel,network,disk,adm -s /bin/zsh $user"
  run "chfn $user"
}

# method to install packages via pacaur
function install() {
  run "pacaur -S --quiet --noconfirm $@"
}

function set_git_to_ssh {
  run "git remote set-url origin $gitlabssh"
}

# method to initiate a git folder & repository
function init_git() {
  namespace=$1
  repo=$2
  run "git init"
  run "git remote add http $gitlabhttp/$namespace/$repo\.git"
  run "git remote add origin $gitlabssh:$namespace/$repo\.git"
  run "git branch --set-upstream-to=http/master master"
  run "git pull"
}

function ready_git_ns() {
  namespace = $1 
  for repo in *;
  do
    if [ -d $repo ]; then
      cd $repo
      init_git $namespace $repo
    fi
  done
}

function ready_git_repos {
  for namespace in $githome/*;
  do
    if [ -d $namespace ]; then
      cd $githome/$namespace
      ready_git_ns $namespace
    fi
  done
}

# update pacman mirrors and rank them
function rank_mirrors {
  run "pacman -S reflector"
  run "mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup"
  run "reflector -l 5 --sort rate --save /etc/pacman.d/mirrorlist"
}

# create necessary folders
function prepare_folders {
  mkdir -p $folders $dotfolders $gitfolders
}

# install all programs and scripts
function install_progs {
  utility="ranger atool unzip p7zip unrar anything-sync-daemon truecrypt dos2unix autocutsel zathura{,-pdf-poppler,-ps,-cb,-djvu}"
  multimedia="vlc deadbeef feh imagemagick"
  systools="upower tlp tp_smapi memtest86+ alsa-utils dcfldd ntfs-3g "
  terminal="zsh zsh-syntax-highlighting grml-zsh-config rxvt-unicode urxvt-perls rxvt-unicode-terminfo"
  xorg="xorg-{server,xinit,setxkbmap,xmodmap,xrandr,xset}"
  windowmanager="i3"
  development="sublime-text gvim eclipse"
  internet="wget openssh openssl openvpn flashplugin icedtea-web-java7 uzbl polipo privoxy mutt pidgin-otr git skype"

  install $utility $termieral $internet $xorg $windowmanager $systools
  $development $multimedia
}

# setup programs and their configurations
function setup_progs {
  #TODO enable stuff in systemd
  run "systemctl enable cronie.service"

  # export PATH="/usr/lib/cw:$PATH"
  #
  # TODO change asd config so that it syncs ~/.git/profiles/.mozilla in ram
  # add systemd services (asd, ...)
  # TODO: ssh
  #
  # append memtest stuff to syslinux.cfg
  echo -e "LABEL memtest\n\tMENU LABEL Memtest86+\n\tLINUX ../memtest86+/memtest.bin\n" >> /boot/syslinux/syslinux.cfg

  # change shell to zsh
  run "chsh -s /bin/zsh $USER"
  run "chsh -s /bin/zsh root"
}

function setup_git {
  for $namespace in $githome/*;
  do
    cd $githome/$namespace
  
    for $repo in *;
    do
      cd $repo
      ./install
    done
  
  done
}

# method to install pacaur from the aur
function install_pacaur {
  # TODO aur mit pacman syntax
  # TODO testen
  run "mkdir /tmp/$USER-pacaur-install"
  run "cd /tmp/$USER-pacaur-install"

  run "wget https://aur.archlinux.org/packages/co/cower/cower.tar.gz"
  run "wget https://aur.archlinux.org/packages/pa/pacaur/pacaur.tar.gz"

  run "tar -xf cower.tar.gz"
  run "tar -xf pacaur.tar.gz"

  cd cower
  run "makepkg -si"

  cd ../pacaur
  run "makepkg -si"

  cd .. 
  run "rm -r {cower,pacaur}"
  run "rm -r /tmp/$USER-pacaur-install"
}

function main {
  root

  greenecho "Ranking mirrors for pacman.."
  rank_mirrors

  greenecho "Updating system.."
  run "pacman -Syu -q --force --noconfirm"

  greenecho "Installing pacaur.."
  install_pacaur

  greenecho "Installing and configuring programs.."
  install_progs && setup_progs

  greenecho "Please enter your username: " 
  read user
  create_user $user

  greenecho "Switching to user $user"
  run "su $user"

  greenecho "Creating folders $folders and $gitfolders"
  prepare_folders

  greenecho "Setting up git repositories"
  ready_git_repos && setup_git

  success=1
}

function help {
  echo -e "usage: wconnect [COMMANDS]\n
    possible commands are:\n 
    \t-h this help message
    \t-v verbosity: [1] - stdout, 2 - stdout & stderr\n"
}

while getopts "hv:" optname
do
  case "$optname" in
    "h")
      help
      exit 0
      ;;
    "v")
      case "$OPTARG" in
        1)
          verbosity="2>/dev/null"
          ;;
        2)
          verbosity=""
          ;;
        *)
          failecho "only values 0,1 and 2 are allowed. Defaulting to 1 (only stdout)"
          verbosity="2>/dev/null"
          ;;
      esac
      ;;
    "?")
      failecho "Unknown option $OPTARG"
      exit 1
      ;;
    ":")
      failecho "No argument value for option $OPTARG"
      exit 1
      ;;
    *)
      # Should not occur
      failecho "Unknown error while processing options"
      exit $?
      ;;
  esac
done


while [[ success == 0 ]]; do
  main
done
